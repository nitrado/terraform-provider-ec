package armada

// Code generated by schema-gen. DO NOT EDIT.

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/nitrado/terraform-provider-ec/ec/meta"
)

func regionSchema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"metadata": {
			Type:        schema.TypeList,
			Description: "Standard object's metadata.",
			Optional:    true,
			MaxItems:    1,
			Elem:        &schema.Resource{Schema: meta.Schema()},
		},
		"spec": {
			Type:        schema.TypeList,
			Description: "Spec defines the desired region configuration.",
			Optional:    true,
			MaxItems:    1,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"description": {
						Type:        schema.TypeString,
						Description: "Description is the optional description of the region.",
						Optional:    true,
					},
					"display_name": {
						Type:        schema.TypeString,
						Description: "DisplayName is the user-friendly name of a region.",
						Optional:    true,
					},
					"types": {
						Type:        schema.TypeList,
						Description: "Types defines the types on infrastructure available in the region.",
						Required:    true,
						Elem: &schema.Resource{
							Schema: map[string]*schema.Schema{
								"name": {
									Type:        schema.TypeString,
									Description: "Name is the name of the region type.",
									Required:    true,
								},
								"sites": {
									Type:        schema.TypeList,
									Description: "Sites defines the sites for a type.",
									Required:    true,
									Elem:        &schema.Schema{Type: schema.TypeString},
								},
								"template": {
									Type:        schema.TypeList,
									Description: "Template is the optional configuration to apply to all fleets in this region.",
									Optional:    true,
									MaxItems:    1,
									Elem: &schema.Resource{
										Schema: map[string]*schema.Schema{
											"env": {
												Type:        schema.TypeList,
												Description: "Env is a list of environment variables to set on all containers in this region.",
												Optional:    true,
												Elem:        &schema.Resource{Schema: envSchema()},
											},
											"scheduling": {
												Type:        schema.TypeString,
												Description: "Scheduling strategy. Defaults to \"Packed\"",
												Optional:    true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}
